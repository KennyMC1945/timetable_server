{
  "_from": "@hapi/joi",
  "_id": "@hapi/joi@16.1.4",
  "_inBundle": false,
  "_integrity": "sha512-m7ctezhxjob+dSpXnCNlgAj6rrEpdSsaWu3GWL3g1AybQCU36mlAo9IwGFJwIxD+oHgdO6mYyviYlaejX+qN6g==",
  "_location": "/@hapi/joi",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@hapi%2fjoi",
    "fetchSpec": "latest",
    "name": "@hapi/joi",
    "raw": "@hapi/joi",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "scope": "@hapi",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@hapi/joi/-/joi-16.1.4.tgz",
  "_shasum": "b039fe474a0ab838c1a90620c53a208fcef75d99",
  "_spec": "@hapi/joi",
  "_where": "C:\\Users\\hacke\\Documents\\TimeTable_Server",
  "browser": "dist/joi-browser.min.js",
  "bugs": {
    "url": "https://github.com/hapijs/joi/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@hapi/address": "^2.1.2",
    "@hapi/formula": "^1.2.0",
    "@hapi/hoek": "^8.2.4",
    "@hapi/pinpoint": "^1.0.2",
    "@hapi/topo": "^3.1.3"
  },
  "deprecated": false,
  "description": "Object schema validation",
  "devDependencies": {
    "@hapi/bourne": "1.x.x",
    "@hapi/code": "6.x.x",
    "@hapi/joi-legacy-test": "npm:@hapi/joi@15.x.x",
    "@hapi/lab": "20.x.x"
  },
  "files": [
    "dist/*",
    "lib/**/*"
  ],
  "homepage": "https://github.com/hapijs/joi#readme",
  "keywords": [
    "schema",
    "validation"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "name": "@hapi/joi",
  "optionalDependencies": {},
  "readme": "<a href=\"https://hapi.dev\"><img src=\"https://raw.githubusercontent.com/hapijs/assets/master/images/family.png\" width=\"180px\" align=\"right\" /></a>\n\n# @hapi/joi\n\nThe most powerful schema description language and data validator for JavaScript.\n\n[![Build Status](https://travis-ci.org/hapijs/joi.svg?branch=master)](https://travis-ci.org/hapijs/joi)\n\n## Introduction\n\n**joi** lets you describe your data using a simple, intuitive, and readable language. Like the rest of the [hapi ecosystem](https://hapi.dev) it fits in, **joi** allows you to describe your data for both input and output validation, as part of a hapi HTTP server or standalone.\n\n## API\n\nSee the detailed [API Reference](https://hapi.dev/family/joi/).\n\n## Example\n\n```js\nconst Joi = require('@hapi/joi');\n\nconst schema = Joi.object({\n    username: Joi.string()\n        .alphanum()\n        .min(3)\n        .max(30)\n        .required(),\n\n    password: Joi.string()\n        .pattern(/^[a-zA-Z0-9]{3,30}$/),\n\n    repeat_password: Joi.ref('password'),\n\n    access_token: [\n        Joi.string(),\n        Joi.number()\n    ],\n\n    birth_year: Joi.number()\n        .integer()\n        .min(1900)\n        .max(2013),\n\n    email: Joi.string()\n        .email({ minDomainSegments: 2, tlds: { allow: ['com', 'net'] } })\n})\n    .with('username', 'birth_year')\n    .xor('password', 'access_token')\n    .with('password', 'repeat_password');\n\n\nschema.validate({ username: 'abc', birth_year: 1994 });\n// -> { value: { username: 'abc', birth_year: 1994 } }\n\nschema.validate({});\n// -> { value: {}, error: '\"username\" is required' }\n\n// Also -\n\ntry {\n    const value = await schema.validateAsync({ username: 'abc', birth_year: 1994 });\n}\ncatch (err) { }\n```\n\nThe above schema defines the following constraints:\n* `username`\n    * a required string\n    * must contain only alphanumeric characters\n    * at least 3 characters long but no more than 30\n    * must be accompanied by `birth_year`\n* `password`\n    * an optional string\n    * must satisfy the custom regex pattern\n    * cannot appear together with `access_token`\n    * must be accompanied by `repeat_password` and equal to it\n* `access_token`\n    * an optional, unconstrained string or number\n* `birth_year`\n    * an integer between 1900 and 2013\n* `email`\n    * a valid email address string\n    * must have two domain parts e.g. `example.com`\n    * TLD must be `.com` or `.net`\n\n## Usage\n\nUsage is a two steps process:\n\nFirst, a schema is constructed using the provided types and constraints:\n\n```js\nconst schema = Joi.object({\n    a: Joi.string()\n});\n```\n\nNote that **joi** schema objects are immutable which means every additional rule added (e.g.\n`.min(5)`) will return a new schema object.\n\nSecond, the value is validated against the defined schema:\n\n```js\nconst { error, value } = schema.validate({ a: 'a string' });\n```\n\nIf the input is valid, then the `error` will be `null`. If the input is invalid, `error` is assigned\na [`ValidationError`](https://github.com/hapijs/joi/blob/master/API.md#validationerror) object\nproviding more information.\n\nThe schema can be a plain JavaScript object where every key is assigned a **joi** type, or it can be a **joi** type directly:\n\n```js\nconst schema = Joi.string().min(10);\n```\n\nIf the schema is a **joi** type, the `schema.validate(value)` can be called directly on the type. When passing a non-type schema object,\nthe module converts it internally to an object() type equivalent to:\n\n```js\nconst schema = Joi.object().keys({\n    a: Joi.string()\n});\n```\n\nWhen validating a schema:\n\n* Values (or keys in case of objects) are optional by default.\n\n    ```js\n    Joi.string().validate(undefined); // validates fine\n    ```\n\n    To disallow this behavior, you can either set the schema as `required()`, or set `presence` to `\"required\"` when passing `options`:\n\n    ```js\n    Joi.string().required().validate(undefined);\n    // or\n    Joi.string().validate(undefined, /* options */ { presence: \"required\" });\n    ```\n\n* Strings are utf-8 encoded by default.\n* Rules are defined in an additive fashion and evaluated in order, first the inclusive rules, then the exclusive rules.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/joi.git"
  },
  "scripts": {
    "prepublishOnly": "cd browser && npm install && npm run build",
    "test": "lab -t 100 -a @hapi/code -L",
    "test-cov-html": "lab -r html -o coverage.html -a @hapi/code"
  },
  "version": "16.1.4"
}
